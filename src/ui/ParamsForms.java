/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import spacelife.SpaceParams;
import waterspace.WorldManager;
import waterworld.WaterParams;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.JTabbedPane;
import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author vince
 */
public class ParamsForms extends javax.swing.JFrame {

    
    private WorldManager wm;
    private AbstractFrame gui;
    /**
     * Creates new form ParamsForms
     */
    
    
    JSpinner x_dimension = new JSpinner();
    JSpinner y_dimension = new JSpinner();
    JSpinner n_penguin = new JSpinner();
    JSpinner n_sharks = new JSpinner();
    JSpinner n_ice = new JSpinner();
    JSpinner r_period = new JSpinner();
    JSpinner starving_each = new JSpinner();
    
    JSpinner space_spin_y_dimension = new JSpinner();
    JSpinner space_spin_nb_asteroids = new JSpinner();
    JSpinner space_spin_nb_martian = new JSpinner();
    JSpinner space_spin_nb_kryptonian = new JSpinner();
    JSpinner space_spin_nb_planets = new JSpinner();
    JSpinner space_spin_x_dimension = new JSpinner();
    
    public ParamsForms(WorldManager wm, AbstractFrame gui) {
        getContentPane().setPreferredSize(new Dimension(350, 320));
        this.wm = wm;
        this.gui=gui;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bt_startGame = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bt_startGame.setText("Start New Game");
        bt_startGame.setToolTipText("");
        bt_startGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_startGameActionPerformed(evt);
            }
        });
        getContentPane().setLayout(new BorderLayout(0, 0));
        
        tabbedPane = new JTabbedPane(JTabbedPane.TOP);
        getContentPane().add(tabbedPane, BorderLayout.CENTER);
        
        JPanel waterPanel = new JPanel();
        tabbedPane.addTab("Water world", null, waterPanel, null);
        waterPanel.setLayout(null);
        
        JLabel label = new JLabel();
        label.setText("Dimension Y");
        label.setBounds(10, 47, 172, 14);
        waterPanel.add(label);
        
        JLabel label_1 = new JLabel();
        label_1.setText("Number of Penguins");
        label_1.setBounds(10, 77, 172, 14);
        waterPanel.add(label_1);
        
        JLabel label_2 = new JLabel();
        label_2.setText("Number of Sharks");
        label_2.setBounds(10, 115, 172, 14);
        waterPanel.add(label_2);
        
        JLabel label_3 = new JLabel();
        label_3.setText("Number of Iced Case");
        label_3.setBounds(10, 153, 172, 14);
        waterPanel.add(label_3);
        
        JLabel label_4 = new JLabel();
        label_4.setText("Recuperation period after sex");
        label_4.setBounds(10, 191, 201, 14);
        waterPanel.add(label_4);
        
        JLabel label_5 = new JLabel();
        label_5.setText("Nb of step before shark die of hunger");
        label_5.setBounds(10, 229, 246, 14);
        waterPanel.add(label_5);
        
        
        y_dimension.setModel(new SpinnerNumberModel(new Integer(8), null, null, new Integer(1)));
        y_dimension.setMinimumSize(new Dimension(40, 20));
        y_dimension.setPreferredSize(new Dimension(40, 20));
        y_dimension.setBounds(292, 47, 43, 20);
        waterPanel.add(y_dimension);
        
        
        n_penguin.setModel(new SpinnerNumberModel(new Integer(4), null, null, new Integer(1)));
        n_penguin.setMinimumSize(new Dimension(40, 20));
        n_penguin.setPreferredSize(new Dimension(40, 20));
        n_penguin.setBounds(292, 77, 43, 20);
        waterPanel.add(n_penguin);
        
        n_sharks.setModel(new SpinnerNumberModel(new Integer(7), null, null, new Integer(1)));
        n_sharks.setMinimumSize(new Dimension(40, 20));
        n_sharks.setPreferredSize(new Dimension(40, 20));
        n_sharks.setBounds(292, 115, 43, 20);
        waterPanel.add(n_sharks);
        
        n_ice.setModel(new SpinnerNumberModel(new Integer(15), null, null, new Integer(1)));
        n_ice.setMinimumSize(new Dimension(40, 20));
        n_ice.setPreferredSize(new Dimension(40, 20));
        n_ice.setBounds(292, 153, 43, 20);
        waterPanel.add(n_ice);
        
        r_period.setModel(new SpinnerNumberModel(new Integer(5), null, null, new Integer(1)));
        r_period.setMinimumSize(new Dimension(40, 20));
        r_period.setPreferredSize(new Dimension(40, 20));
        r_period.setBounds(292, 191, 43, 20);
        waterPanel.add(r_period);
        
        starving_each.setModel(new SpinnerNumberModel(new Integer(100), null, null, new Integer(1)));
        starving_each.setMinimumSize(new Dimension(40, 20));
        starving_each.setPreferredSize(new Dimension(40, 20));
        starving_each.setBounds(292, 229, 43, 20);
        waterPanel.add(starving_each);
        
        JLabel label_6 = new JLabel();
        label_6.setText("Dimension X");
        label_6.setBounds(10, 14, 172, 14);
        waterPanel.add(label_6);
        
        
        x_dimension.setModel(new SpinnerNumberModel(new Integer(8), null, null, new Integer(1)));
        x_dimension.setMinimumSize(new Dimension(40, 20));
        x_dimension.setPreferredSize(new Dimension(40, 20));
        x_dimension.setBounds(292, 14, 43, 20);
        waterPanel.add(x_dimension);
        
        JPanel spacePanel = new JPanel();
        spacePanel.setLayout(null);
        tabbedPane.addTab("Space world", null, spacePanel, null);
        
        JLabel label_7 = new JLabel();
        label_7.setText("Dimension Y");
        label_7.setBounds(10, 47, 172, 14);
        spacePanel.add(label_7);
        
        JLabel lblNumberOfAsteroids = new JLabel();
        lblNumberOfAsteroids.setText("Number of Asteroids");
        lblNumberOfAsteroids.setBounds(10, 77, 172, 14);
        spacePanel.add(lblNumberOfAsteroids);
        
        JLabel lblNumberOfMartiens = new JLabel();
        lblNumberOfMartiens.setText("Number of Martian");
        lblNumberOfMartiens.setBounds(10, 115, 172, 14);
        spacePanel.add(lblNumberOfMartiens);
        
        JLabel lblNumberOfKryptonian = new JLabel();
        lblNumberOfKryptonian.setText("Number of Kryptonian");
        lblNumberOfKryptonian.setBounds(10, 153, 172, 14);
        spacePanel.add(lblNumberOfKryptonian);
        
        JLabel lblNumberOfPlanets = new JLabel();
        lblNumberOfPlanets.setText("Number of Planets");
        lblNumberOfPlanets.setBounds(10, 191, 201, 14);
        spacePanel.add(lblNumberOfPlanets);
        space_spin_y_dimension.setModel(new SpinnerNumberModel(8, 6, 50, 1));
        
        
        space_spin_y_dimension.setPreferredSize(new Dimension(40, 20));
        space_spin_y_dimension.setMinimumSize(new Dimension(40, 20));
        space_spin_y_dimension.setBounds(292, 47, 43, 20);
        spacePanel.add(space_spin_y_dimension);
        
        space_spin_nb_asteroids.setPreferredSize(new Dimension(40, 20));
        space_spin_nb_asteroids.setMinimumSize(new Dimension(40, 20));
        space_spin_nb_asteroids.setBounds(292, 77, 43, 20);
        spacePanel.add(space_spin_nb_asteroids);
        
        space_spin_nb_martian.setPreferredSize(new Dimension(40, 20));
        space_spin_nb_martian.setMinimumSize(new Dimension(40, 20));
        space_spin_nb_martian.setBounds(292, 115, 43, 20);
        spacePanel.add(space_spin_nb_martian);
        
        space_spin_nb_kryptonian.setPreferredSize(new Dimension(40, 20));
        space_spin_nb_kryptonian.setMinimumSize(new Dimension(40, 20));
        space_spin_nb_kryptonian.setBounds(292, 153, 43, 20);
        spacePanel.add(space_spin_nb_kryptonian);
        
        space_spin_nb_planets.setPreferredSize(new Dimension(40, 20));
        space_spin_nb_planets.setMinimumSize(new Dimension(40, 20));
        space_spin_nb_planets.setBounds(292, 191, 43, 20);
        spacePanel.add(space_spin_nb_planets);
        
        JLabel label_13 = new JLabel();
        label_13.setText("Dimension X");
        label_13.setBounds(10, 14, 172, 14);
        spacePanel.add(label_13);
        space_spin_x_dimension.setModel(new SpinnerNumberModel(8, 6, 50, 1));
        
        space_spin_x_dimension.setPreferredSize(new Dimension(40, 20));
        space_spin_x_dimension.setMinimumSize(new Dimension(40, 20));
        space_spin_x_dimension.setBounds(292, 14, 43, 20);
        spacePanel.add(space_spin_x_dimension);
        getContentPane().add(bt_startGame, BorderLayout.SOUTH);
        
        
        ChangeListener spaceDimensionChangeListener = new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent arg0) {
                space_adapt_minMaxValues();
            }
        };
        space_spin_x_dimension.addChangeListener(spaceDimensionChangeListener);
        space_spin_y_dimension.addChangeListener(spaceDimensionChangeListener);

        space_adapt_minMaxValues();
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_startGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_startGameActionPerformed
        
        
        //wm.setParameters(8,8, 4, 7,15,2, 2);
        
        if((Integer)x_dimension.getValue() <= 0 || (Integer)y_dimension.getValue() <= 0){
            JOptionPane.showMessageDialog(this, "Please enter a higher value than 0 for X and Y...");
            return;
        }
        
        if(tabbedPane.getSelectedIndex() == 0){
            wm.setParameters(new WaterParams((Integer)x_dimension.getValue(), (Integer)y_dimension.getValue(), (Integer)n_sharks.getValue(), (Integer)n_penguin.getValue(), (Integer)n_ice.getValue(), (Integer)starving_each.getValue(), (Integer)r_period.getValue()));
        }
        else{
            wm.setParameters(new SpaceParams(
                    (Integer)space_spin_x_dimension.getValue(),
                    (Integer)space_spin_y_dimension.getValue(),
                    (Integer)space_spin_nb_planets.getValue(),
                    (Integer)space_spin_nb_asteroids.getValue(),
                    (Integer)space_spin_nb_kryptonian.getValue(),
                    (Integer)space_spin_nb_martian.getValue()
                    ));
        }

        gui.setVisible(true);
        this.setVisible(false);
        
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_startGameActionPerformed


    // Variables declaration - do not modify                     
    private javax.swing.JButton bt_startGame;
    private JTabbedPane tabbedPane;
    
    void space_adapt_minMaxValues(){
        int max = (int)(1.0/5 * ((Integer)space_spin_x_dimension.getValue()) + ((Integer)space_spin_y_dimension.getValue()));
        
        JSpinner[] spinners = new JSpinner[]{
                space_spin_nb_asteroids,
                space_spin_nb_planets,
                space_spin_nb_kryptonian,
                space_spin_nb_martian
        };
        
        for(int i = 0; i < spinners.length; i++){
            space_adapt_single_minMaxValues(spinners[i], (Integer)spinners[i].getValue(), 1, max);
        }
    }
    
    void space_adapt_single_minMaxValues(JSpinner source, int actualValue, int min, int max){
        if(max < actualValue){
            actualValue = max;
        }
        if(min > actualValue){
            actualValue = min;
        }
        source.setModel(new SpinnerNumberModel(actualValue, min, max, 1));
        
    }
}
